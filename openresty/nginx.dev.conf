worker_processes 1;

error_log logs/error.log debug;

events {
    worker_connections 512;
}

# Configure openwayback url
# env OWB_URL=http://owb:8080/wayback/20201021123309/https://www.qa.ssb.no;

# OWB_URL is the address of the OWB server
env OWB_URL=http://owb:8080;

# address of the site archived in the warc files
env SITE_URL=https://www.qa.ssb.no;

# address of the rendering service
env RENDERER_URL=http://localhost:6060/;

http {
    # server {
    #     listen 8080;
    #     server_name owb;
    #     rewrite ^ http://localhost:6060$request_uri? permanent;
    # }

    server {
        listen 6060;
        resolver 127.0.0.11 ipv6=off;

        ssl_certificate /secure/fbu.pem;
        ssl_certificate_key /secure/fbu.key;

        lua_ssl_trusted_certificate /secure/fbu.pem;
        lua_ssl_verify_depth 3;

        location ^~ /_public {
            set_by_lua $site_url 'return os.getenv("SITE_URL")';
            rewrite /_public/(.*) /_public/$1 break;

            proxy_pass $site_url;
            proxy_redirect off;
        }

        location ~ ^/(.*) {
            set $contentPath $request_uri;

            content_by_lua_block {
                ngx.log(ngx.DEBUG, 'lua block start ...')
                local composer = require("composer");
                local owbArchivePrefix = os.getenv("OWB_URL")
                    .. "/wayback/"
                    .. os.getenv("SITE_URL")
                    .. "/";

                ngx.log(ngx.DEBUG, "owb url for page", owbArchivePrefix .. ngx.var.contentPath);

                local headerUrl = os.getenv("SITE_URL") .. '/system/topp';
                local headerRes, headerErr = composer.fetchUrl(os.getenv("SITE_URL") .. "/system/topp");

                -- uncomment the following lines and include in final response when footer is ready!
                -- local footerUrl = os.getenv("SITE_URL") .. '/system/bunn';
                -- local footerRes, footerErr = composer.fetchUrl(os.getenv("SITE_URL") .. "/system/bunn");

                ngx.header["Content-Type"] = "text/html";

                if headerErr then
                    ngx.say(headerErr);
                else
                    local header = headerRes.body;
                    -- ngx.log(ngx.DEBUG, header);

                    local pageContent = composer.extractPage(owbArchivePrefix .. ngx.var.contentPath);
                    -- ngx.log(ngx.DEBUG, pageContent);

                    local final = (header .. pageContent);
                    -- ngx.log(ngx.DEBUG, final);

                    ngx.say(final);
                end
            }
        }
    }
}
